%% -------------------------------------------------------------------------------
%% --------------------------------- Input Facts ---------------------------------
%% -------------------------------------------------------------------------------

%% waterCell(R, C) : cell[R][C] is water, you can move into it.
%% visitedCell(R, C) : cell[R][C] in which you've moved into.
%% minedCell(R, C) : cell[R][C] in which a Mine was placed.

%% myPos(R, C) : current Position of the Player.

%% myLife(N) : current Life Value of the Player.
%% oppLife(N) : current Life Value of the Opponent Player.

%% torpedoCooldown(N) : current CoolDown Value of the Power Torpedo.
%% sonarCooldown(N) : current CoolDown Value of the Power Sonar.
%% silenceCooldown(N) : current CoolDown Value of the Power Silence.
%% mineCooldown(N) : current CoolDown Value of the Power Mine.

%% oppOffsets(VO, HO) : current Vertical and Horizontal Offsets of the Opponent Player's Position relative to its initial one.

%% oppMove(T, D) : Opponent's last Move Command with Direction at time T.
%% oppSurface(T, S) : Opponent's last Surface Command with Sector Index at time T.
%% oppTorpedo(T, R, C) : Opponent's last Torpedo Command with Position at Time T.
%% oppMine(T, D) : Opponent's last Mine Command with Direction at time T.
%% oppTrigger(T, R, C) : Opponent's last Trigger Command with Position at Time T.
%% oppSector(S) : Positive Result of Sonar Power on the Sector S (at Previous Round).
%% oppNoSector(S) : Negative Result of Sonar Power on the Sector S (at Previous Round).

%% ----- Utils in input
%% actionSlot(T) : Defines the number of (single, non-repeatable) Actions can be made in a single Round
%% direction(D, DR, DC) : Defines the Cardinal Directions as ASP Symbols with Offsets Position.
%% sector(S, CR, CC) : Defines Sectors of the Map, with Center Position (Row and Column).
%% power(P) : Defines Power that can be used during the Game (noPower -> nil).

%% -------------------------------------------------------------------------------
%% -------------------------------- Output Facts ---------------------------------
%% -------------------------------------------------------------------------------

%% move(Time, Direction, ActivePower). [move/3] : Chosen Direction of the Player at time Time, with Power to Activate.
%% ----- Time : [by actionSlot(Time)] (time ordering of the actions)
%% ----- Direction = [n, s, w, e];
%% ----- ActivePower = [nil, torpedo];

%% surface(Time). [surface/1] : Chosen Surface Action at time Time.
%% ----- Time : [by actionSlot(Time)] (time ordering of the actions)

%% torpedo(Time, Row, Column). [torpedo/3] : Chosen Position to fire Torpedo at time Time.
%% ----- Time : [by actionSlot(Time)] (time ordering of the actions)
%% ----- Row : Row (Y) of Position in which Player fired Torpedo.
%% ----- Column : Column (X) of Position in which Player fired Torpedo.

%% mine(Time, Direction). [mine/2] : Chosen Direction to Mine by the Player at time Time.
%% ----- Time : [by actionSlot(Time)]  (time ordering of the actions)
%% ----- Direction = [n, s, w, e];

%% trigger(Time, Row, Column). [trigger/3] : Chosen Position of Mine to Trigger at time Time.
%% ----- Time : [by actionSlot(Time)] (time ordering of the actions)
%% ----- Row : Row (Y) of Position of the chosen Mine.
%% ----- Column : Column (X) of Position of the chosen Mine.

%% sonar(Time, Sector). [sonar/2] : Chosen Sector to Scan with Sonar at time Time.
%% ----- Time : [by actionSlot(Time)] (time ordering of the actions)
%% ----- Sector = [1, 2, ..., 9];

%% Show only these (YOU. SHALL. NOT. TOUCH.)
#show move/3.
#show surface/1.
#show torpedo/3.
#show mine/2.
#show trigger/3.
#show sonar/2.

waterCell(R, C) :- waterCell(R, C, S).
oppVerticalOffset(N) :- oppOffsets(N, _).
oppHorizontalOffset(N) : oppOffsets(_, N).


%% Each time, the Player can choose between this set of Actions.
moveAction(T) | surface(T) | firePower(T) | noAction(T) :- actionSlot(T).
{ move(T, D) : directions(D) } = 1 :- moveAction(T).
{ fireTorpedo(T) } = 1 :- firePower(T).

%% No action can be made twice.
:- surface(T1), surface(T2), T1 != T2.
:- fireTorpedo(T1), fireTorpedo(T2), T1 != T2.
:- moveAction(T1), moveAction(T2), T1 != T2.
:- noAction(T1), not noAction(T2), T2 = T1 + 1, T2 <= 3.
:- noAction(1).

%% Player's new Position
moveIntoCell(R-1, C) :- myPos(R, C), move(_, n).
moveIntoCell(R+1, C) :- myPos(R, C), move(_, s).
moveIntoCell(R, C-1) :- myPos(R, C), move(_, w).
moveIntoCell(R, C+1) :- myPos(R, C), move(_, e).

%% Cannot move on islands or visited cells.
%:- moveIntoCell(R, C), not waterCell(R, C).
%:- moveIntoCell(R, C), visitedCell(R, C).

%% If Move Action is chosen, a power can be charged.
activeTorpedo(T)  :- move(T, _).
powerActive(T) :- activeTorpedo(T).

%% Translating moving and power charging in one predicate.
move(T, D, nil) :- move(T, D), not powerActive(T).
move(T, D, torpedo) :- move(T, D), activeTorpedo(T).

%% Using some Power
%torpedo(T, 1, 1) :- torpedoCooldown(0), fireTorpedo(T), myPos(R, C).
%torpedo(T, 1, 1) :- torpedoCooldown(1), move(T1, _, torpedo), fireTorpedo(T), T1 < T, myPos(R, C).

% :~ adessoPiango. [1@1]
%:~ surface(T). [1@1]
:~ actionSlot(T), not fireTorpedo(T). [1@2, T]

:- fireTorpedo(_), torpedoCooldown(N), N > 1.
