%%
%% Input Facts:
%%

%% waterCell(R, C) : cell[R][C] is water, you can move into it.
%% visitedCell(R, C) : cell[R][C] in which you've moved into.

%% myPos(R, C) : current Position of the Player.
%% myLife(N) : current Life Value of the Player.
%% oppLife(N) : current Life Value of the Opponent Player.
%% torpedoCooldown(N) : current CoolDown Value of the Power Torpedo.
%% sonarCooldown(N) : current CoolDown Value of the Power Sonar.
%% silenceCooldown(N) : current CoolDown Value of the Power Silence.
%% mineCooldown(N) : current CoolDown Value of the Power Mine.
%% oppVerticalOffset(N) : current Offset of the Y Position of the Opponent Player relative to its initial Position.
%% oppHorizontalOffset(N) : current Offset of the X Position of the Opponent Player relative to its initial Position.
%% oppMove(D) : Opponent's last Move Command with Direction.
%% oppSurface(S) : Opponent's last Surface Command with Sector Index.
%% oppTorpedo(R, C) : Opponent's last Torpedo Command with Position.

%%
%% Output Facts:
%%

%% move(Time, Direction, ActivePower). [move/3] : Chosen Direction of the Player at time Time, with Power to Activate.
%% ----- Time : time ordering of the actions
%% ----- Direction = [n, s, w, e];
%% ----- ActivePower = [nil, torpedo];

%% surface(Time). [surface/1] : Chosen Surface Action at time Time.
%% ----- Time : time ordering of the actions

%% torpedo(Time, Row, Column). [torpedo/3] : Chosen Position to fire Torpedo at time Time.
%% ----- Time : time ordering of the actions
%% ----- Row : Row (Y) of Position in which Player fired Torpedo.
%% ----- Column : Column (X) of Position in which Player fired Torpedo.

%% Show only these (YOU. SHALL. NOT. TOUCH.)
#show move/3.
#show surface/1.
#show torpedo/3.

%% Number of Actions that can be made.
time(1..3).
directions(n). directions(s). directions(w). directions(e).

%% Each time, the Player can choose between this set of Actions.
moveAction(T) | surface(T) | firePower(T) | noAction(T) :- time(T).
{ move(T, D) : directions(D) } = 1 :- moveAction(T).
{ fireTorpedo(T) } = 1 :- firePower(T).

%% No action can be made twice.
:- surface(T1), surface(T2), T1 != T2.
:- fireTorpedo(T1), fireTorpedo(T2), T1 != T2.
:- moveAction(T1), moveAction(T2), T1 != T2.
:- noAction(T1), not noAction(T2), T2 = T1 + 1, T2 <= 3.
:- noAction(1).

%% Player's new Position
moveIntoCell(R-1, C) :- myPos(R, C), move(_, n).
moveIntoCell(R+1, C) :- myPos(R, C), move(_, s).
moveIntoCell(R, C-1) :- myPos(R, C), move(_, w).
moveIntoCell(R, C+1) :- myPos(R, C), move(_, e).

%% Cannot move on islands or visited cells.
%:- moveIntoCell(R, C), not waterCell(R, C).
%:- moveIntoCell(R, C), visitedCell(R, C).

%% If Move Action is chosen, a power can be charged.
activeTorpedo(T)  :- move(T, _).
powerActive(T) :- activeTorpedo(T).

%% Translating moving and power charging in one predicate.
move(T, D, nil) :- move(T, D), not powerActive(T).
move(T, D, torpedo) :- move(T, D), activeTorpedo(T).

%% Using some Power
%torpedo(T, 1, 1) :- torpedoCooldown(0), fireTorpedo(T), myPos(R, C).
%torpedo(T, 1, 1) :- torpedoCooldown(1), move(T1, _, torpedo), fireTorpedo(T), T1 < T, myPos(R, C).

% :~ adessoPiango. [1@1]
%:~ surface(T). [1@1]
:~ time(T), not fireTorpedo(T). [1@2, T]

:- fireTorpedo(_), torpedoCooldown(N), N > 1.
